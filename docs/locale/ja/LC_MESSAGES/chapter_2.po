# 
msgid ""
msgstr ""
"Project-Id-Version: tutorial.todoapp 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-15 15:01\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../chapter_2.rst:10
msgid "Chapter 2: Filesystem package"
msgstr ""

#: ../chapter_2.rst:12
msgid ""
"Alright! In Chapter 1 you got your content-type and your workflow hooked up "
"and running. You're now ready for the next step: pushing your changes to a "
"filesystem-based package and into a version control system."
msgstr ""

#: ../chapter_2.rst:16
msgid "Now, why would you even want to do that? Here's a couple of reasons:"
msgstr ""

#: ../chapter_2.rst:19
msgid "**Tracking of changes**"
msgstr ""

#: ../chapter_2.rst:21
msgid ""
"The most obvious one: when you store the configuration of your content-type "
"and your workflow in a VCS, you can track how they changed over time. It "
"useful to be able to look back a few months and see how your files changed."
msgstr ""

#: ../chapter_2.rst:25
msgid "**Distribution to other developers**"
msgstr ""

#: ../chapter_2.rst:27
msgid ""
"If you are working in a team you have two ways of distributing your work: "
"either write up a guide on what needs to be clicked for someone to come to "
"the state you are currently at (slow, manual and error-prone) OR you export "
"your configuration and the other developer simply imports it (fast, "
"consistent)."
msgstr ""

#: ../chapter_2.rst:33
msgid "**Tests**"
msgstr ""

#: ../chapter_2.rst:35
msgid ""
"Last, but the most important one, having your configuration exported to a "
"filesystem package allows you to write tests for it. When your test runner "
"spins up a Plone site to run tests again, it needs to have the same content-"
"type and workflow that you configured TTW. And importing configuration is by"
" far the easiest way to give him that."
msgstr ""

#: ../chapter_2.rst:43
msgid "Package skeleton"
msgstr ""

#: ../chapter_2.rst:45
msgid ""
"Let's start by creating a package skeleton. Since writing things up from "
"scratch kinda sucks, use this tutorial as your skeleton."
msgstr ""

#: ../chapter_2.rst:50
msgid "Exporting configuration"
msgstr ""

#: ../chapter_2.rst:53
msgid "Exporting Todo Item content-type"
msgstr ""

#: ../chapter_2.rst:55
msgid ""
"Navigate back to the dexterity content type panel or go directly to "
"``http://localhost:8080/Plone/@@dexterity-types``"
msgstr ""

#: ../chapter_2.rst:58
msgid ""
"Check the TODO item and then click on export type profile to download the "
"type. If you don't check anything, it won't do anything and there is "
"currently no error message so don't be surprised."
msgstr ""

#: ../chapter_2.rst:65
msgid ""
"This will start a download to you machine. Navigate to that directory and "
"unzip the contents of that directory. Here is an example of what this will "
"look like:"
msgstr ""

#: ../chapter_2.rst:72
msgid ""
"We need to take types.xml and the types folder, and save it in our base "
"product. You can use your finder or explorer to drag and drop, or use the "
"command line. I'll use command line as an example but feel free to "
"improvise. You want to move the files into your default product profile. "
"What's a profile? Don't worry about it. Sit back, relax, and finish the "
"tutorial. You will move the files into"
msgstr ""

#: ../chapter_2.rst:82
msgid ""
"Anytime you perform some sort of configuration export from Plone to a custom"
" product, you will put the XML files in the profiles/default folder. Every "
"time you make changes to your types, you should re-export and save into the "
"same location. Now, when the next person installs the add-on, they wil have "
"the type already there!"
msgstr ""

#: ../chapter_2.rst:89
msgid "Dependencies"
msgstr ""

#: ../chapter_2.rst:91
msgid ""
"Before we continue we need to tell Plone that whenever we install "
"`tutorial.todoapp` we want it to also pull in the Dexterity package, so our "
"content type is working happily. We do that by adding the following lines to"
" ``profiles/default/metadata.xml``, inside the ``<metadata>`` tag."
msgstr ""

#: ../chapter_2.rst:104
msgid "Exporting todo_item_workflow"
msgstr ""

#: ../chapter_2.rst:106
msgid ""
"Exporting a workflow is very similar to exporting a Dexterity type. It just "
"takes a little bit more navigating and a trip to the ZMI. To export the "
"workflow, navigate to the root of the ZMI by gong to "
"``http://localhost:8080/Plone/manage_main``. From there, head into the "
"portal setup tool:"
msgstr ""

#: ../chapter_2.rst:114
msgid ""
"WARNING: The following User Interface is not recommended for children under "
"18."
msgstr ""

#: ../chapter_2.rst:116
msgid "In the portal_setup tool, click on the export tab."
msgstr ""

#: ../chapter_2.rst:121
msgid ""
"There are a LOT of things that you can export here, but that is for a "
"different tutorial. For now, find export item #28 called ``Workflow Tool``, "
"check the box to the left. Then scroll all the way to the bottom and "
"``Export selected steps``."
msgstr ""

#: ../chapter_2.rst:128
msgid ""
"Just like the Dexterity content type, you will want to untar the downloaded "
"folder, and move into your default profile folder."
msgstr ""

#: ../chapter_2.rst:131
msgid ""
"In that download you should have a file called ``workflows.xml`` and a "
"folder called ``workflows`` like below. You will move both of them to the "
"default profile."
msgstr ""

#: ../chapter_2.rst:138
msgid "Place all of these files in your profile at"
msgstr ""

#: ../chapter_2.rst:144
msgid "And you are done! Congratulations on the birth of your new product!"
msgstr ""

#: ../chapter_2.rst:148
msgid "Tests"
msgstr ""

#: ../chapter_2.rst:150
msgid ""
"Alright, tests! Considered a pain and a nuisance by some but loved by all "
"who do it. If you want your code to be solid and your site to be stable, "
"tests are a great way to get there."
msgstr ""

#: ../chapter_2.rst:154
msgid ""
"The package you have on your filesystem is already configured to give you a "
"test-runner so you can immediately go and run it -- obviously you have no "
"tests, but at least you try if your test runner works."
msgstr ""

#: ../chapter_2.rst:163
msgid ""
"Note: you do *NOT* need to stop your Plone instance in order to run tests. "
"They will peacefully co-exist."
msgstr ""

#: ../chapter_2.rst:166
msgid ""
"Good, the next thing to do is to add tests. Go to `tutorial.todoapp repo on "
"GitHub <https://github.com/collective/tutorial.todoapp/>`_ and copy/paste "
"(or download) all files from the ``src/tutorial/todoapp/tests`` folder to "
"your local ``src/tutorial/todoapp/tests`` folder. You can also get the tests"
" with git:"
msgstr ""

#: ../chapter_2.rst:177
msgid "In this folder there will be many new files:"
msgstr ""

#: ../chapter_2.rst:179
msgid "**base.py**"
msgstr ""

#: ../chapter_2.rst:181
msgid ""
"This module contains code that bootstraps your test environment: start up "
"Zope, add a Plone site, install your package, etc. Code in here is mostly "
"boilerplate so for now just use it and mind what exactly it does underneath."
msgstr ""

#: ../chapter_2.rst:185
msgid "**test_setup.py**"
msgstr ""

#: ../chapter_2.rst:187
msgid ""
"This module contains tests that check if your package was successfully "
"installed and configured. Tests in here are concerned with XML files you "
"have in the ``profiles/default`` folder."
msgstr ""

#: ../chapter_2.rst:191
msgid "**test_todo_item.py**"
msgstr ""

#: ../chapter_2.rst:193
msgid "And finally a module that contains tests for your custom content-type."
msgstr ""

#: ../chapter_2.rst:195
msgid ""
"We will not go into details of what each test does as we believe the test "
"code and its comments are in themselves informative and we will rather "
"encourage you to go through all tests, try to understand what they do, maybe"
" change something and see what happens, etc."
msgstr ""

#: ../chapter_2.rst:200
msgid ""
"Remember that you run tests with ``bin/test`` and you should get an output "
"that looks somewhat like this:"
msgstr ""

#: ../chapter_2.rst:220
msgid "Troubleshooting"
msgstr ""

#: ../chapter_2.rst:222
msgid ""
"If something goes wrong you can always go to GitHub and see how the `code "
"for chapter 2 "
"<https://github.com/collective/tutorial.todoapp/tree/chapter2>`_ should look"
" like and compare this to what you have on your local machine."
msgstr ""

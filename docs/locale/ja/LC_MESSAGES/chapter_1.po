# 
msgid ""
msgstr ""
"Project-Id-Version: tutorial.todoapp 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-15 15:01\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../chapter_1.rst:10
msgid "Chapter 1: Through-The-Web"
msgstr ""

#: ../chapter_1.rst:13
msgid "Getting Started with Content Types"
msgstr ""

#: ../chapter_1.rst:15
msgid ""
"If you don't know what a content type is, don't worry! Sit back, relax, and "
"do the tutorial! I'll save the mumbo jumbo definitions for another day. In "
"this first part, we will make a Todo list without touching any code. It "
"won't be fancy, but it will give you a good idea of how things work in "
"Plone."
msgstr ""

#: ../chapter_1.rst:20
msgid ""
"The way that Plone handles content is a little different than your average "
"relational database driven framework, so if you don't understand something "
"right away, sit back, relax, and finish the tutorial."
msgstr ""

#: ../chapter_1.rst:24
msgid ""
"Generally speaking, content-types are just that: types of content. By "
"default, in Plone you get the News Item content-type, the Event content-type"
" and so on. So if you add a content item that is of Event type, you are "
"using the Event content-type. In our case, we will create a new content-type"
" that will represent a Todo Item."
msgstr ""

#: ../chapter_1.rst:32
msgid "Create a New Content Type"
msgstr ""

#: ../chapter_1.rst:34
msgid ""
"First we need to create a new content type to represent an item on our Todo "
"list. This will be a type with one field, that which needs to be done."
msgstr ""

#: ../chapter_1.rst:37
msgid ""
"Navigate to `site setup` as shown below, or just enter "
"``http://localhost:8080/Plone/@@overview-controlpanel`` in your browser. "
"This is where you can configure Plone for happy fun time."
msgstr ""

#: ../chapter_1.rst:44
msgid ""
"Now comes the fun part. We want to create our own type `Through-The-Web` "
"aka. `TTW`. This type will be a Todo Item. Let’s click `Dexterity Content "
"Types` (or go directly to ``http://localhost:8080/Plone/@@dexterity-"
"types``)."
msgstr ""

#: ../chapter_1.rst:51
msgid "Create a Todo List Item by clicking ``Add New Content Type``."
msgstr ""

#: ../chapter_1.rst:56
msgid "Fill in the fields as seen below and then click ``Add``."
msgstr ""

#: ../chapter_1.rst:61
msgid ""
"Now you will see that there is a new type to play with. Let’s adjust a few "
"things. Click the name of the new type to edit."
msgstr ""

#: ../chapter_1.rst:67
msgid ""
"There are two important things we need to do here: we need to adjust some "
"`behaviors`, and add some `fields`. Let’s look at the behaviors first."
msgstr ""

#: ../chapter_1.rst:73
msgid ""
"By default, all Plone content-types have `Dublin Core "
"<http://en.wikipedia.org/wiki/Dublin_Core>` metadata enabled (you may know "
"it as ``title`` and ``description``. We don’t need this for our über simple "
"Todo list item. Uncheck ``Dublin Core metadata`` and then click ``Save``."
msgstr ""

#: ../chapter_1.rst:81
msgid ""
"Next we need to add some fields. Because this type is so simple, we will add"
" just one field, but feel free to go CRAZY. Start by going back to the "
"``Fields`` tab and clicking ``Add new field...``."
msgstr ""

#: ../chapter_1.rst:88
msgid ""
"Add a field called ``Todo``, or anything else you want. But! Note that it's "
"very important that the `short name` is ``title``. By using this key short "
"name, we make sure that all Todo Items are searchable from smart search. "
"Update the field as seen below and click ``Add``."
msgstr ""

#: ../chapter_1.rst:96
msgid ""
"You will see that a new field has been added to your content type. If you "
"are feeling adventuresome, click on the settings tab next to the field to "
"set other properties, or just see what’s available."
msgstr ""

#: ../chapter_1.rst:105
msgid "Trying out the Todo Item content-type"
msgstr ""

#: ../chapter_1.rst:107
msgid ""
"Now it's time to reap the rewards of all of your effort. Let's put all of "
"our Todo Items in one particular folder so that we can have collections of "
"items throughout the site. For this tutorial, we will be putting everything "
"in the root of the site so it's easy to debug."
msgstr ""

#: ../chapter_1.rst:112
msgid "From the root, add a new folder called ``Todo``."
msgstr ""

#: ../chapter_1.rst:120
msgid "Add a new `Todo Item` to the new `Todo` folder."
msgstr ""

#: ../chapter_1.rst:128
msgid "Celebrate!"
msgstr ""

#: ../chapter_1.rst:133
msgid ""
"You may be wondering about earlier, when we asked you to make sure that the "
"`short name` for the Todo Item was called ``title``. The time has come to "
"let you in on a little secret. Calling the short name either ``title`` or "
"``description`` will automatically add that text to the livesearch menu. "
"WHAT?!? I know! When life gives you lemonade, spike it with vodka and enjoy "
"liberally! You can now search for your Todo Items in Live Search."
msgstr ""

#: ../chapter_1.rst:143
msgid ""
"But wait a minute... This todo item is marked ``private``, and that doesn't "
"really make sense. It's a good thing Plone has an easy solution for that. In"
" the next section, we will go over the basics of that magical, mystical "
"word: `workflow`."
msgstr ""

#: ../chapter_1.rst:150
msgid "Getting Started with Workflows"
msgstr ""

#: ../chapter_1.rst:152
msgid ""
"So, workflows. What are they? They are a mechanizm to control the flow of a "
"content item through varios states. Most commonly, and by default in Plone, "
"you deal with a `publication` workflow. For example: A writer writes up a "
"News Item and submits it for reviewal. Then the in-house reviewing team goes"
" through the text and publishes the News Item so it is public for the entire"
" world to see."
msgstr ""

#: ../chapter_1.rst:159
msgid ""
"The Todo Item we added in the last section is marked as ``private`` because "
"by default all new Plone content types are assigned a complex publication "
"workflow called ``simple_publication_workflow``. I know what you are "
"thinking: simple publication whodie whatie grble gobble??!?! Just like "
"before, let's bypass trying to explain what that means and just fix it. "
"Relax, enjoy, and finish the tutorial!"
msgstr ""

#: ../chapter_1.rst:166
msgid ""
"If you aren't interested in workflows, or already know all about this stuff,"
" feel free to skip straight to the next chapter!"
msgstr ""

#: ../chapter_1.rst:169
msgid ""
"Todo Items really have 2 states that we are interested in: `open` and "
"`complete`. Let's make that happen."
msgstr ""

#: ../chapter_1.rst:172
msgid "Head over to the ZMI at ``http://localhost:8080/Plone/manage_main``."
msgstr ""

#: ../chapter_1.rst:173
msgid "In the ZMI, open the ``portal_workflow`` tool."
msgstr ""

#: ../chapter_1.rst:178
msgid ""
"On this page, we see all content-types in our portal `mapped` to a workflow."
" Our new type, Todo Item, is mapped to ``(Default)``. You can see right "
"below that the default is ``Simple Publication Workflow``. This is just too "
"complex for our little Todo Item."
msgstr ""

#: ../chapter_1.rst:186
msgid ""
"So let's create a new one that suites our needs perfectly! Click the "
"``contents`` tab at the top of the page to get a listing of all the "
"available workflows."
msgstr ""

#: ../chapter_1.rst:193
msgid ""
"You can poke around here all you like, but the details of each one of these "
"workflows are better left to another tutorial. When in doubt, you can always"
" come back to these workflows to see examples of how things can be done. "
"Onwards and upwards!"
msgstr ""

#: ../chapter_1.rst:198
msgid ""
"Let's create a new workflow for our Todo Items and call it "
"``todo_item_workflow``. We will make a new workflow by copying and "
"customizing one of the workflows that are already there. Duplicate the "
"``one_state_workflow``."
msgstr ""

#: ../chapter_1.rst:206
msgid "Rename the copied workflow to ``todo_item_workflow``."
msgstr ""

#: ../chapter_1.rst:214
msgid ""
"You will be spit back out and the workflow contents page. Click the workflow"
" to start editing."
msgstr ""

#: ../chapter_1.rst:220
msgid ""
"Let's update the name of the workflow so we don't double take later on."
msgstr ""

#: ../chapter_1.rst:226
msgid ""
"Workflow is something that takes time to get used to if you have never "
"encoutered the concept. The best analogy in our case is to a car. The car "
"engine has two simple states: `on` and `off`. To transition from on to off "
"and vice versa, it needs some action from the driver. The same for our TODO "
"items. They have two states: `open` and `complete`. In order to get them "
"from `Incomplete` to `Complete`, the user needs to click something. Don't "
"understand yet? Relax, sit back, and finish the tutorial."
msgstr ""

#: ../chapter_1.rst:234
msgid ""
"Lets start by adding out base states. We will call them `open` and "
"`complete`. From the edit workflow screen, click on the ``States`` tab."
msgstr ""

#: ../chapter_1.rst:240
msgid "Delete the currently listed state."
msgstr ""

#: ../chapter_1.rst:246
msgid "Add two states with the ids ``open`` and ``completed``."
msgstr ""

#: ../chapter_1.rst:254
msgid ""
"Next lets add the transitions. The transitions will take the TODO item from "
"`open` to `completed` and vice versa (in case a user accidentally marks an "
"item as complete. Click on the ``Transitions`` tab."
msgstr ""

#: ../chapter_1.rst:261
msgid ""
"Add two transitions: `complete` and `reopen`. When a user `completes` a "
"task, it will move into the `completed` state. When a user `reopens` a task,"
" it will go back to the `open` state."
msgstr ""

#: ../chapter_1.rst:268
msgid ""
"Let's add a few details to these new transitions. Let's start with "
"`complete`. Click on ``complete`` to edit the transition."
msgstr ""

#: ../chapter_1.rst:274
msgid ""
"First add a title so you remember later what this does. Description is "
"optional but adding one will help you keep your thoughts clear and remind "
"the `future you` what the `today you` is thinking. The destination state "
"should be set to ``completed``. We also want to make sure that only peopl "
"with mega permissions, or the owner itself, can change the state so we add "
"``Modify portal content`` to the ``Permissions`` box."
msgstr ""

#: ../chapter_1.rst:281
msgid ""
"All this means nothing if we don't give the user a chance to change the "
"state. Next to ``Display in actions box``, we can set the title for what "
"will be displayed in the workflow drop down box of the item (where "
"`Pending`, `Reject`, etc where earlier). Let's call it ``Complete``. Last "
"but not least, we need to add the url that the action points to. I could "
"make this tutorial 100 years long and explain why you have to do this, but "
"accept that it has to be done, relax, and follow this formula:"
msgstr ""

#: ../chapter_1.rst:293
msgid ""
"where `X` is the id of the transition. So for this case, in the URL box, you"
" will add"
msgstr ""

#: ../chapter_1.rst:303
msgid "Double check everything and click ``Save``."
msgstr ""

#: ../chapter_1.rst:305
msgid ""
"If your brain isn't hurting yet it will be soon. Go back to the transitions "
"listing."
msgstr ""

#: ../chapter_1.rst:315
msgid ""
"Let's update the `reopen` transition and update in a similar manner. This "
"time, the destination state is ``open``, and following the formula above, "
"the URL is ``%(content_url)s/content_status_modify?workflow_action=reopen``."
msgstr ""

#: ../chapter_1.rst:322
msgid ""
"Now we have 2 states and 2 transitions, but they aren't 100% linked "
"together... yet. Go back to the workflow listing, click the ``States`` tab "
"and then and click on ``completed`` to edit the state."
msgstr ""

#: ../chapter_1.rst:332
msgid ""
"Add a title, since this is what users see in the top right corner of the "
"TODO items, and then check ``reopen`` as a possible transition. This means "
"that when a TODO item is completed, it will only allow the user to reopen it"
" (and not re-complete it, for example). In the same respect, open the open "
"transition, add a title, and mark ``complete`` as a possible transition."
msgstr ""

#: ../chapter_1.rst:344
msgid ""
"When we create a new TODO item, we need to tell Plone what the first state "
"is. Go back to the workflow states listing, and make ``open`` the initial "
"state."
msgstr ""

#: ../chapter_1.rst:351
msgid ""
"And that's it! Almost... Last but not least, we need to assign our new "
"workflow to our TODO item type. Go back to the main workflow screen."
msgstr ""

#: ../chapter_1.rst:357
msgid ""
"Instead of mapping to the ``(Default)`` workflow, we are going to map to the"
" id of our new workflow, ``todo_item_workflow``, and then click ``Change``."
msgstr ""

#: ../chapter_1.rst:360
msgid ""
"If you already have TODO items in your site, you MUST click ``Update "
"Security Settings`` to update the workflow for the items. Instead of going "
"into gross detail about why this is the case, just sit back, relax, finish "
"the tutorial, and remember to click this button any time you make changes "
"(yes! you can continue to change and update your workflows!)."
msgstr ""

#: ../chapter_1.rst:369
msgid ""
"Could the time have arrived? Time to try it out? YES! Go to your ``Todo`` "
"folder and add a new TODO Item. Validate that the workflow works as "
"expected. By toggling between the states."
msgstr ""

#: ../chapter_1.rst:376
msgid ""
"Congrats! You have now passed `Plone Workflow 101`. Next we will transition "
"from developing through the web (TTW) to developing on the filesystem."
msgstr ""
